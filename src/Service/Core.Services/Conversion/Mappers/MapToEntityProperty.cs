using System;
using System.Reflection;

namespace Core.Services.Conversion
{
    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
    public class MapToEntityProperty : Attribute
    {
        private readonly string _propertyName;
        private ConvertMechanism _convert;
        private bool _convertToDto = true;
        private bool _convertToEntity = true;

        public MapToEntityProperty(string propertyName)
        {
            EnsurePropertiesAreSetCorrectly();
            _propertyName = propertyName;
        }

        public string EntityPropertyNameToMap
        {
            get { return _propertyName; }
        }

        public bool IsAutogeneratedIdentity { get; set; }

        /// <summary>
        /// sets both ConvertToDto and ConvertToEntity to the same value
        /// </summary>
        public ConvertMechanism Convert
        {
            get { return _convert; }
            set
            {
                _convert = value;
                ConvertToDtoMechanism = value;
                ConvertToEntityMechanism = value;
            }
        }

        /// <summary>
        /// quale meccanismo di  conversione deve essere utilizzato per la creazione del DTO
        /// </summary>
        public ConvertMechanism ConvertToDtoMechanism { get; set; }

        /// <summary>
        /// quale meccanismo di  conversione deve essere utilizzato per la creazione dell' entita
        /// </summary>
        public ConvertMechanism ConvertToEntityMechanism { get; set; }

        /// <summary>
        /// La classe da utilizzare come istanza durante la creazione dell DTO.
        /// La classe DEVE implementare l'interfaccia che è esposta nella proprietà del DTO
        /// </summary>
        public string ConvertChildsUsingConcreteClassFullName { get; set; }

        /// <summary>
        /// Indica se è  per aggiungere figli all' entità è neccessario invokare un metodo.
        /// questa soluzione è indispensabile per i mapping delle entità con Inverse="true"
        /// </summary>
        public string EntityMethodToInvokeToAddChilds { get; set; }

        /// <summary>
        /// Indica quale proprietà utilizzare per recuperare il il valore
        /// </summary>
        public string EntityPropertyToInvoke { get; set; }


        public bool ConvertToEntity
        {
            get { return _convertToEntity; }
            set { _convertToEntity = value; }
        }

        public bool ConvertToDto
        {
            get { return _convertToDto; }
            set { _convertToDto = value; }
        }

        private void EnsurePropertiesAreSetCorrectly()
        {
#if DEBUG
            // assicurarsi che le combinazioni di properta sono state fatte correttamente
#endif
        }


        /// <summary>
        /// Torna il tipo definito nella proprietà ConvertConcreteClass
        /// </summary>
        /// <param name="assemblyToSearchInForDto">l' assembly che contiente il tipo da ritornare</param>
        /// <returns></returns>
        public Type GetTypeToUseFromMapToEntityProperty(Assembly assemblyToSearchInForDto)
        {
            if (!HasConvertChildsUsingConcreteClassSpecified())
                throw new MapToEntityPropertyDeclarationException(
                    "A type must be specified in the ConvertConcreteClass propriety to allow a Type creation");

            string concrateClassToUse = ConvertChildsUsingConcreteClassFullName;
            var typeSpecificationToUseInGeneric =
                Type.GetType(String.Format("{0},{1}", concrateClassToUse, assemblyToSearchInForDto.FullName));
            if (typeSpecificationToUseInGeneric == null)
                throw new MapToEntityPropertyDeclarationException(String.Format("Cannot create an instance of type {0} (in assembly {1}) defined in ConvertConcreteClass attribute property", 
                    concrateClassToUse, assemblyToSearchInForDto.FullName));

            return typeSpecificationToUseInGeneric;
        }

        /// <summary>
        /// Indica se è stato specifcata la proprietà AddChildsToEntityUsingMethod
        /// </summary>
        public bool HasAddChildsToEntityUsingMethodSpecified()
        {
            return !String.IsNullOrEmpty(EntityMethodToInvokeToAddChilds);
        }

        public bool HasConvertChildsUsingConcreteClassSpecified()
        {
            if (String.IsNullOrEmpty(ConvertChildsUsingConcreteClassFullName))
                return false;
            return true;
        }


        public bool HasEntityPropertyToInvoke()
        {
            if (String.IsNullOrEmpty(EntityPropertyToInvoke))
                return false;
            return true;
        }
    }
}